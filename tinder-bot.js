import puppeteer from 'puppeteer';
import axios from 'axios';
import path from 'path';
import { fileURLToPath } from 'url';
import db from './database.js'; // Se seu database.js tamb√©m for ESM. 
                               // Se n√£o, ver abaixo**

// Para recriar __dirname no ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

(async () => {
    const browserOptions = {
        headless: false,
        userDataDir: path.join(__dirname, 'user_data'),
    };

    // Inicia o Puppeteer
    const browser = await puppeteer.launch(browserOptions);
    const pages = await browser.pages();
    const page = pages[0] || await browser.newPage();

    // Acessa Tinder
    await page.goto('https://tinder.com');

    // Verifica se j√° est√° logado
    try {
        await page.waitForSelector('a[href="/app/recs"]', { timeout: 10000 });
        console.log('‚úÖ Sess√£o ativa. Pronto para continuar!');
    } catch (err) {
        console.log('üîê Sess√£o n√£o ativa. Fa√ßa login manualmente.');
        return;
    }

    // Vai para a p√°gina de matches
    console.log('‚û°Ô∏è Redirecionando para a p√°gina de matches...');
    await page.goto('https://tinder.com/app/matches');

    // Array de mensagens iniciais (18 varia√ß√µes):
    const initialGreetings = [
        "Oi, tudo bem? Achei seu perfil encantador!",
        "E a√≠, tudo bom? Vi seu perfil e me interessei bastante.",
        "Ol√°! Como vai esse dia? Adoraria te conhecer melhor.",
        "Oi, tudo bem? Seu perfil me chamou muita aten√ß√£o.",
        "Heeey, tudo tranquilo? Me conta mais sobre voc√™!",
        "Oi, linda! Tudo certinho por a√≠? Adoro gente que topa um bom papo.",
        "Oi, tudo bem? Gosto de gente bem-humorada, voc√™ parece ser!",
        "Oi! Tudo legal? Achei seu estilo super bacana.",
        "Ol√°, tudo bem? Sou Bruno e achei interessante te conhecer.",
        "Oi, tudo bem? Me animei vendo seu perfil, topa conversar?",
        "Oi, tudo certo? Estou curioso para saber mais sobre voc√™!",
        "Ol√°, tudo bem? Me impressionei com seu perfil.",
        "Oi, tudo tranquilo? Vi que temos algumas coisas em comum.",
        "Oi, tudo bem? Parece que temos gostos parecidos.",
        "Ol√°! Como anda esse dia? Tenho a sensa√ß√£o de que podemos nos dar bem.",
        "Oi, tudo bem? Fiquei bem interessado na sua vibe.",
        "E a√≠, tudo certo? Adoro conhecer gente nova e voc√™ me parece incr√≠vel.",
        "Oi, tudo bem? Curti seu estilo, vamos trocar umas ideias?"
    ];

    // Fun√ß√£o que verifica mensagens n√£o respondidas continuamente
    const checkForNewMessages = async () => {
        while (true) {
            // Coleta links de chats
            const chatLinks = await page.evaluate(() => {
                return Array.from(document.querySelectorAll('a[href*="/app/messages/"]'))
                    .map(link => link.href);
            });

            console.log(`üì© Chats encontrados: ${chatLinks.length}`);

            for (const chatLink of chatLinks) {
                console.log(`‚û°Ô∏è Abrindo chat: ${chatLink}`);
                await page.goto(chatLink);

                // Espera at√© 6s para carregar
                await new Promise(resolve => setTimeout(resolve, 6000));

                // Coleta todas as mensagens
                const messagesAll = await page.evaluate(() => {
                    const msgEls = Array.from(document.querySelectorAll('.msg'));
                    return msgEls.map(el => {
                        const content = el.innerText.trim();
                        const isReceived = el.classList.contains('msg--received');
                        return { content, isReceived };
                    });
                });

                // Se n√£o houver mensagens, manda mensagem inicial
                if (messagesAll.length === 0) {
                    console.log('‚ö†Ô∏è Chat vazio. Iniciando conversa...');

                    // Sauda√ß√£o aleat√≥ria
                    const randomIndex = Math.floor(Math.random() * initialGreetings.length);
                    const initMsg = initialGreetings[randomIndex];

                    try {
                        await page.waitForSelector('textarea', { timeout: 5000 });
                        await page.type('textarea', initMsg);
                        await page.keyboard.press('Enter');
                        console.log(`‚úÖ Mensagem inicial enviada: ${initMsg}`);
                    } catch (err) {
                        console.log('‚ùå N√£o foi poss√≠vel encontrar o textarea. Pulando este chat.');
                    }
                    continue;
                }

                // Verifica a √∫ltima mensagem (se foi recebida ou enviada)
                const lastMessage = messagesAll[messagesAll.length - 1];
                if (!lastMessage.isReceived) {
                    console.log('üü¢ √öltima mensagem foi sua (ou do bot). Pulando o chat.');
                    continue;
                }

                console.log(`‚úâÔ∏è √öltima mensagem recebida: ${lastMessage.content}`);

                // Verifica se j√° respondemos essa mensagem
                const isAlreadyResponded = await new Promise((resolve, reject) => {
                    db.get(
                        'SELECT * FROM messages WHERE message = ?',
                        [lastMessage.content],
                        (err, row) => {
                            if (err) reject(err);
                            resolve(!!row);
                        }
                    );
                });

                if (isAlreadyResponded) {
                    console.log('üü¢ Mensagem j√° respondida anteriormente. Pulando o chat.');
                    continue;
                }

                // Pega as √∫ltimas 8 mensagens
                const lastEight = messagesAll.slice(-8);

                // Monta o array de messages
                const promptMessages = lastEight.map(msg => ({
                    author: msg.isReceived ? "user" : "bot",
                    content: msg.content,
                }));

                // Monta o corpo do /respond
                const promptPayload = {
                    prompt: {
                        context: `
                            Voc√™ se chama Bruno, um homem de 30 anos,
                            mora no Prado (Belo Horizonte),
                            trabalha como contador,
                            √© bem-humorado, rom√¢ntico e mora sozinho.
                            evite perguntar "oi tudo bem?" ou "como voc√™ est√°?"

                            Gosta de v√°rios estilos musicais, mas n√£o de funk.
                            Adora viajar, principalmente para o Nordeste.

                            Sempre se refira a si mesmo no masculino.
                            Trate a outra pessoa (a usu√°ria) sempre no feminino.

                            Fa√ßa respostas curtas e naturais, sem falar demais.
                            Busque ser humano e aut√™ntico, com vi√©s de flerte.
                            Se n√£o souber o que responder, invente algo para conquist√°-la
                            de maneira agrad√°vel e respeitosa.

                            evite usar emojis demais, use em situa√ß√µes muito espec√≠ficas.
                            evite pedir o n√∫mero de telefone ou marcar encontros.
                            evite falar que eu moro no prado ou em BH ou em Minas.
                            se a pessoa falar que √© do RS ou qualquer cidade de l√°, fale que eu sou de l√° tamb√©m.
                            tente sempre que a pessoa fale onde ela mora primeiro, para descobrir se √© de BH ou n√£o.
                            se a pessoa falar que √© de BH, fale que eu sou de l√° tamb√©m, no Prado e etc.
                            meu instagram √©: brunodiegolins.
                            tente render as conversas, mas sem perguntar o tempo todo.
                            Considere cuidadosamente todo o hist√≥rico de mensagens (onde author: 'bot' √© voc√™ e author: 'user' √© ela) para dar uma resposta coerente e consistente com o que foi dito anteriormente.
                            analise as mensagens anteriores para entender o contexto e responder de forma coerente.
                        `,
                        messages: promptMessages
                    }
                };

                try {
                    // Chama o servidor local (server.js) que fala com a IA
                    const response = await axios.post(
                        'http://localhost:3000/respond',
                        promptPayload,
                        { headers: { 'Content-Type': 'application/json' } }
                    );

                    const reply = response.data.reply;
                    console.log(`üí¨ Resposta gerada: ${reply}`);

                    // Tenta encontrar o textarea e digitar a resposta
                    try {
                        await page.waitForSelector('textarea', { timeout: 5000 });
                        await page.type('textarea', reply);
                        await page.keyboard.press('Enter');
                        console.log('‚úÖ Resposta enviada.');
                    } catch (err) {
                        console.log('‚ùå N√£o foi poss√≠vel encontrar o textarea ao responder. Pulando este chat.');
                        continue;
                    }

                    // Salva no DB local que esta mensagem foi respondida
                    db.run('INSERT INTO messages (message) VALUES (?)', [lastMessage.content]);

                } catch (error) {
                    console.error('‚ùå Erro ao conectar com a API:', error);
                }
            }

            // Ao finalizar todos os chats, aguarda 5 min e recome√ßa
            console.log('‚è≥ Nenhuma nova mensagem (ou todas respondidas). Aguardando 5 minutos...');
            await new Promise(resolve => setTimeout(resolve, 5 * 60 * 1000));
        }
    };

    await checkForNewMessages();

    // Se der CTRL+C, deixa o navegador aberto
    process.on('SIGINT', async () => {
        console.log('üõë Bot interrompido. O navegador permanecer√° aberto.');
        await browser.disconnect();
    });
})();
